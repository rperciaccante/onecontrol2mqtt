[
  {
    "id": "d835395a71a29e4e",
    "type": "tab",
    "label": "onecontrol2mqtt",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "4d120df8ca1fcd48",
    "type": "group",
    "z": "d835395a71a29e4e",
    "name": "Standardize message format and values",
    "style": {
      "fill": "#e3f3d3",
      "label": true,
      "color": "#000000"
    },
    "nodes": [
      "0e3f7dde666c6f45",
      "7b4c9ec50dd220c1",
      "25034cbb4dcd41f6",
      "1918c38b2c0483db",
      "77ed266e1527b9fb",
      "f37ed64401fa0c97",
      "5b47a0a705f5603d"
    ],
    "x": 454,
    "y": 19,
    "w": 342,
    "h": 242
  },
  {
    "id": "e5b7f34b2218c588",
    "type": "group",
    "z": "d835395a71a29e4e",
    "name": "Gather info on missing entities",
    "style": {
      "fill": "#e3f3d3",
      "label": true,
      "color": "#000000"
    },
    "nodes": [
      "d026855058e4ceb9",
      "066bfd5ec452c9f7",
      "3d6468a0c84c9a5d",
      "2136a0e7f2c00b5e",
      "e6e2cb88c6f1676e"
    ],
    "x": 834,
    "y": 19,
    "w": 312,
    "h": 242
  },
  {
    "id": "d94168eab795cd92",
    "type": "group",
    "z": "d835395a71a29e4e",
    "name": "Set up connection and begin event stream",
    "style": {
      "fill": "#e3f3d3",
      "label": true,
      "color": "#000000"
    },
    "nodes": [
      "974494188c59c907",
      "1bb181142da2e1d1",
      "91b2ba9e7853a348",
      "1339c8545569bbf6",
      "4cb919fb537095df",
      "bb5bbfe0692ce074",
      "240552586c560f25",
      "dc74026414fee91f"
    ],
    "x": 34,
    "y": 19,
    "w": 392,
    "h": 302
  },
  {
    "id": "e715a1afef86e79d",
    "type": "group",
    "z": "d835395a71a29e4e",
    "name": "Publish to MQTT",
    "style": {
      "fill": "#e3f3d3",
      "label": true,
      "color": "#000000"
    },
    "nodes": [
      "c799d53ccda3d370",
      "c6dfaf6fa723a238",
      "01ce43d4d781e61f"
    ],
    "x": 1194,
    "y": 19,
    "w": 372,
    "h": 182
  },
  {
    "id": "f9896bb2219970c5",
    "type": "mqtt-broker",
    "name": "Localhost",
    "broker": "127.0.0.1",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  },
  {
    "id": "21f6c41aef77b8e8",
    "type": "mqtt-broker",
    "name": "Home Dev",
    "broker": "10.2.10.112",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  },
  {
    "id": "0e3f7dde666c6f45",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "4d120df8ca1fcd48",
    "name": "Build Config Message",
    "func": "//       Get global config settings\nconfig = global.get(\"onecontrol2mqtt.config\")\n\n// ==============================================================================\n// \n//   Naming Convention:\n//                         |---------------------channel-----------------|\n//                         |----------------device -------------|        |-attr-|\n//   topic: smarthome/items/idsmyrv_switch_thing_0000000DA7251E09_percent/state\n//          |- base topic -|                                     |-entity|\n//                                               |----deviceID---|\n// ==============================================================================\n\n// #############################################################################\n// There are two different formats that can be used to represent the channel\n//   name.  Since Home Assistant won't allow for special characters in the \n//   payload of entities created via the MQTT Discovery process, we need to \n//   switch the format from:\n//      Example:\n//         From:   idsmyrv_light_thing_0000000DA6BB1407_percent\n//         To:     \n//            device: idsmyrv_light_thing_0000000DA6BB1407\n//            entity: percent\nfunction convertChannel(channelNameOrig) {\n    arrChannel =                        {}\n    entityName =                        \"\"\n    _deviceName =                       channelNameOrig.replace(\"idsmyrv_\",\"idsmyrv:\")\n    _channelName =                      _deviceName.replace(\"thing_\",\"thing:\").split(\":\")\n    _channelName[3] =                   _channelName[2].split(\"_\")\n    deviceID =                          _channelName[3][0]\n    deviceNameOrig =                    _channelName[0] + \"_\" + _channelName[1]\n\n    if (_channelName[3].length == 1) {\n        entityName =                    \"device\"\n    } else if (_channelName[3].length == 2) {\n        entityName =                        _channelName[3][1]\n    } else {\n        for (var i = 1; i < _channelName[3].length; i++) {\n            if ((i + 1) == _channelName[3].length) {\n                    entityName +=           _channelName[3][i]\n                }  else {\n                    entityName +=           _channelName[3][i] + \"_\"\n                }\n        }\n    }\n    //node.warn(entityName)\n    topicSplit =                            (channelNameOrig.replace(\"idsmyrv_\",\"idsmyrv:\")).replace(\"thing_\",\"thing:\").split(\":\")\n    topicSplit[1] =                         (topicSplit[1].replace(/-/g,\"_\")).replace(\"_thing\",\"\")\n    topicSplit[2] =                         topicSplit[2].split(\"_\")[0]\n    topicSplit.push(entityName)\n    topicSplit.push(msg.topic.split(\"/\")[3])\n    arrChannel = {\n        \"topicOrig\":                        msg.topic,\n        \"topicBase\":                        config.mqttDestinationTopicBase +\"/\" + config.mqttDeviceBase,\n        \"topicBaseOrig\":                    msg.topic.split(\"/\")[0] + \"/\"+msg.topic.split(\"/\")[1],\n        \"channelNameOrig\":                  msg.topic.split(\"/\")[2],\n        \"deviceName\":                       topicSplit[1] +\"_\"+ topicSplit[2],\n        \"deviceNameOrig\":                   topicSplit[0] +\":\"+ topicSplit[1].replace(/_/g,\"-\") +\"-thing:\"+ topicSplit[2],\n        \"deviceNameTopicOrig\":              topicSplit[0] +\"_\"+ topicSplit[1] +\"_thing_\"+ topicSplit[2],\n        \"deviceType\":                       topicSplit[1],\n        \"deviceTypeOrig\":                   topicSplit[0] +\":\"+ topicSplit[1] +\"-thing\",\n        \"attribute\":                        topicSplit[4],\n        \"attributeOrig\":                    topicSplit[4],\n        \"entityName\":                       entityName,\n        \"entityNameOrig\":                   entityName,\n        \"topicSplit\":                       topicSplit ,\n        \"deviceID\":                         deviceID,\n        \"eventDirection\":                   \"inbound\",\n        \"eventType\":                        msg.type,\n        \"eventTypeOrig\":                    msg.type\n        }\n    return arrChannel;\n    }\n\n\n\nswitch(msg.type) {\n    case \"ItemStateChangedEvent\":\n        addConfig = {\n            \"eventType\":       \"stateChanged\",\n            \"eventSource\":     \"channel\"\n        }\n        break;\n    case \"ThingStatusInfoEvent\":\n        addConfig = {\n            \"eventType\":       \"deviceState\",\n            \"eventSource\":     \"device\"\n        }\n        break;\n    case \"ItemCommandEvent\":\n        addConfig = {\n            \"eventType\":       \"command\",\n            \"eventSource\":     \"channel\"\n        }\n        break;\n    case \"ItemStateEvent\":\n        addConfig = {\n            \"eventType\":       \"state\",\n            \"eventSource\":     \"channel\"\n        }\n        break;\n   }\nmsg.config  = convertChannel(msg.topic.split(\"/\")[2])\n\nmsg.config = {...msg.config,...addConfig}\n\n\nreturn msg;\n/*\n\n\n*/\n\n\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 60,
    "wires": [
      [
        "1918c38b2c0483db"
      ]
    ]
  },
  {
    "id": "7b4c9ec50dd220c1",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "4d120df8ca1fcd48",
    "name": "Restructure payload",
    "func": "msg1 = {}\nmsg1.config = msg.config\nmsg.payload = JSON.parse((JSON.stringify(msg.payload)).toLowerCase())\nswitch(msg1.config.eventType) {\n    case \"stateChanged\":\n        msg1.payload = {\n            \"type\":                 msg.payload.type,\n            \"value\":                msg.payload.value,\n            \"oldType\":              msg.payload.oldtype,\n            \"oldValue\":             msg.payload.oldvalue,\n            \"details\":              \"\",\n            \"label\":                \"\"\n        }\n        \n        break;\n    case \"deviceState\":\n        msg1.payload = {\n            \"type\":                 \"status\",\n            \"value\":                msg.payload.status,\n            \"oldType\":              \"\",\n            \"oldValue\":             \"\",\n            \"details\":              msg.payload.statusdetail,\n            \"label\":                \"Device\"\n        }\n        break;\n    default:\n        msg1.payload = {\n            \"type\":                 msg.payload.type,\n            \"value\":                msg.payload.value,\n            \"oldType\":              \"\",\n            \"oldValue\":             \"\",\n            \"details\":              \"\",\n            \"label\":                \"\"\n        }\n        break;\n}\n\nreturn msg1;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 100,
    "wires": [
      [
        "25034cbb4dcd41f6"
      ]
    ]
  },
  {
    "id": "25034cbb4dcd41f6",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "4d120df8ca1fcd48",
    "name": "Convert Payload Values",
    "func": "// #############################################################################\n// Convert and round variables, even if they are initially a string.\nfunction roundValue(value,round) {\n    if (isNaN(value) !== true) {\n        value = Number(value)\n        value = value.toFixed(round)\n        value = Number(value)\n    }\n    return value\n}\n\n// Convert all payload to lower case\n\n\n// forwardMsg is used to determine if the message will be passed after processing.\nforwardMsg = true\n\n// Check for specific payloads and round them as appropriate.  Current is rounded\n//   to 0.1, everthing else to 0\nswitch(msg.config.eventType) {\n    case \"stateChanged\":\n        switch(msg.config.entityName) {\n            case \"current\":\n                if (msg.payload.type == \"decimal\") {\n                    msg.payload.value = roundValue(msg.payload.value,1)\n                }\n                if (msg.payload.oldType == \"decimal\") {\n                    msg.payload.oldValue = roundValue(msg.payload.oldValue,1)\n                }\n                if (msg.payload.value == msg.payload.oldValue) {\n                    forwardMsg = false\n                }\n                break;\n            default:\n                if (msg.payload.type == \"decimal\") {\n                    msg.payload.value = roundValue(msg.payload.value,0)\n                }\n                if (msg.payload.oldType == \"decimal\") {\n                    msg.payload.oldValue = roundValue(msg.payload.oldValue,0)\n                }\n                if (msg.payload.value == msg.payload.oldValue) {\n                    forwardMsg = false\n                }\n                break;\n        }\n        break;\n    case \"state\":\n        switch(msg.config.entityName) {\n            case \"current\":\n                if (msg.payload.type == \"decimal\") {\n                    msg.payload.value = roundValue(msg.payload.value,1)\n                }\n                break;\n            default:\n                if (msg.payload.type == \"decimal\") {\n                    msg.payload.value = roundValue(msg.payload.value,0)\n                }\n                break;\n        }\n        break;\n    }\n    \nif (forwardMsg !== false) {\n    return msg;\n}\n\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 590,
    "y": 140,
    "wires": [
      [
        "f37ed64401fa0c97"
      ]
    ]
  },
  {
    "id": "1918c38b2c0483db",
    "type": "moment",
    "z": "d835395a71a29e4e",
    "g": "4d120df8ca1fcd48",
    "name": "Timestamp Event ",
    "topic": "",
    "input": "nan",
    "inputType": "msg",
    "inTz": "America/New_York",
    "adjAmount": 0,
    "adjType": "days",
    "adjDir": "add",
    "format": "ddd MMM DD, YYYY h:mm:ssa",
    "locale": "en_US",
    "output": "config.timeStamp",
    "outputType": "msg",
    "outTz": "America/New_York",
    "x": 755,
    "y": 60,
    "wires": [
      [
        "7b4c9ec50dd220c1"
      ]
    ],
    "l": false
  },
  {
    "id": "77ed266e1527b9fb",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "4d120df8ca1fcd48",
    "name": "Check for Globals",
    "func": "//  ############################################################################\n//       Get global config settings\nconfig = global.get(\"onecontrol2mqtt.config\")\n\n\nfunction capitolizeFirst(string) {\n var output = string.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n return output;\n}\n\ndeviceName =           msg.config.deviceName\n//_deviceID =             msg.core.topicSplit[2]\nchannelName =          msg.config.deviceNameOrig\n\n\nstateDevice = \"onecontrol2mqtt.devices.\" + deviceName\nstateChannel = stateDevice + \".\" + msg.config.entityName\n\n//  ############################################################################\n//       Look for global device object and if not there, create one\nif (typeof global.get((stateDevice)) ==\"undefined\" || typeof global.get((stateChannel)) == \"undefined\" ) {\n        msg.url = config.sourceHTTPServer + \"/rest/things/\"+ channelName\n        msg.eventPayload = msg.payload\n        return[null,msg]\n    } else {\n        msg.payload.label = capitolizeFirst(global.get((stateDevice+\".label\")) + \" \" + global.get((stateChannel+\".label\")))\n        global.set((stateChannel + \".\" + msg.core.eventType),msg.payload)\n        msg.eventPayload = msg.payload\n    }\n            \n    /* */\nreturn [msg,null];",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 570,
    "y": 220,
    "wires": [
      [
        "5b47a0a705f5603d"
      ],
      [
        "d026855058e4ceb9"
      ]
    ],
    "outputLabels": [
      "Global Device Found",
      "Global Device NOT Found"
    ]
  },
  {
    "id": "d026855058e4ceb9",
    "type": "http request",
    "z": "d835395a71a29e4e",
    "g": "e5b7f34b2218c588",
    "name": "Get entity Information",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 960,
    "y": 60,
    "wires": [
      [
        "066bfd5ec452c9f7"
      ]
    ]
  },
  {
    "id": "066bfd5ec452c9f7",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "e5b7f34b2218c588",
    "name": "Write Device Info to Global state",
    "func": "//  ############################################################################\n//       Get global config settings\nconfig = global.get(\"onecontrol2mqtt.config\")\n\ndeviceName =           msg.config.deviceName\n//_channelName =          msg.config.channelNameOrig  //  core.topicSplit[0] + \":\" + msg.core.topicSplit[1].replace(/_/g,\"-\") + \":\" + msg.core.topicSplit[2] + \"_\" + msg.core.topicSplit[3]\n\nstateDevice =           \"onecontrol2mqtt.devices.\" + deviceName\nmsg1 = {\n    \"config\":           msg.config,\n    \"eventPayload\":     msg.eventPayload,\n    \"payload\":          msg.payload\n}\nmsg1.eventPayload.label = (msg.payload.label +\" \" + msg1.eventPayload.label).trim()\n\nnewDevice = {\n    \"label\":            msg.payload.label,\n    \"discoveryDate\":    msg.config.timeStamp,\n    \"deviceType\":       msg.payload.thingTypeUID,\n    \"configuration\":    msg.payload.configuration,\n    \"properties\":       msg.payload.properties\n}\n\nglobal.set((stateDevice),newDevice)\nmsg1.url = config.sourceHTTPServer + \"/rest/items/\"+ msg.config.channelNameOrig //deviceNameOrig + \"_\"+ msg.config.entityName\nreturn msg1;\n\n/*\ndevices.switch_0000000DA7251E09.label\n*/",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 990,
    "y": 100,
    "wires": [
      [
        "3d6468a0c84c9a5d"
      ]
    ]
  },
  {
    "id": "c799d53ccda3d370",
    "type": "mqtt out",
    "z": "d835395a71a29e4e",
    "g": "e715a1afef86e79d",
    "name": "Publish to MQTT",
    "topic": "",
    "qos": "1",
    "retain": "false",
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "f9896bb2219970c5",
    "x": 1390,
    "y": 160,
    "wires": []
  },
  {
    "id": "3d6468a0c84c9a5d",
    "type": "http request",
    "z": "d835395a71a29e4e",
    "g": "e5b7f34b2218c588",
    "name": "Get channel Information",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 970,
    "y": 140,
    "wires": [
      [
        "e6e2cb88c6f1676e"
      ]
    ]
  },
  {
    "id": "2136a0e7f2c00b5e",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "e5b7f34b2218c588",
    "name": "Write Channel to Globals",
    "func": "//  ############################################################################\n//       Get global config settings\nconfig = global.get(\"onecontrol2mqtt.config\")\n\nfunction capitolizeFirst(string) {\n var output = string.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n return output;\n}\n\ndeviceName =           msg.config.deviceName\n\nstateChannel = \"onecontrol2mqtt.devices.\" + deviceName + \".\" + msg.config.attribute\n\nmsg1 = {\n    \"config\":   msg.config,\n    \"payload\":  msg.eventPayload\n}\n\nmsg1.stateChannel = stateChannel\nif (msg.config.eventType == \"deviceState\") {\n    msg1.payload.label =            msg.eventPayload.label\n    newChannel = {\n        \"label\":                    msg.eventPayload.label,\n        \"discoveryDate\":            msg.config.timeStamp,\n        \"stateDescription\":         msg.eventPayload.details\n        }\n    } else {\n        msg1.payload.label =  capitolizeFirst((msg1.payload.label + \" \" + msg.payload.label))\n        newChannel = {\n            \"label\":                    msg.payload.label,\n            \"discoveryDate\":            msg.config.timeStamp,\n            \"stateDescription\":         msg.eventPayload.details\n        }\n}\n\nglobal.set((stateChannel),newChannel)\n\nmsg1.stateChannel = stateChannel\nreturn msg1;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 970,
    "y": 220,
    "wires": [
      [
        "c6dfaf6fa723a238"
      ]
    ]
  },
  {
    "id": "f37ed64401fa0c97",
    "type": "rbe",
    "z": "d835395a71a29e4e",
    "g": "4d120df8ca1fcd48",
    "name": "Reduce Duplicate Messages",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "septopics": true,
    "property": "payload",
    "topi": "config.topicOrig",
    "x": 600,
    "y": 180,
    "wires": [
      [
        "77ed266e1527b9fb"
      ]
    ]
  },
  {
    "id": "c6dfaf6fa723a238",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "e715a1afef86e79d",
    "name": "Structure message for MQTT publish",
    "func": "//  ############################################################################\n//       Get global config settings\nconfig = global.get(\"onecontrol2mqtt.config\")\n\nmsg1 = {}\nmsg1.config = msg.config\nmsg1.payload = msg.payload\nmsg1.payload.timeStamp = msg.config.timeStamp\n\nmsg1.topic = config.mqttDestinationTopicBase + \"/\" + config.mqttDeviceBase + \"/\" + msg.config.deviceName +\"/\"+ msg.config.entityName +\"/\" + msg.config.eventType\nreturn msg1;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1390,
    "y": 120,
    "wires": [
      [
        "c799d53ccda3d370"
      ]
    ]
  },
  {
    "id": "974494188c59c907",
    "type": "inject",
    "z": "d835395a71a29e4e",
    "g": "d94168eab795cd92",
    "name": "",
    "props": [
      {
        "p": "timestamp",
        "v": "",
        "vt": "date"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "x": 130,
    "y": 60,
    "wires": [
      [
        "bb5bbfe0692ce074",
        "91b2ba9e7853a348"
      ]
    ]
  },
  {
    "id": "1bb181142da2e1d1",
    "type": "sse-client",
    "z": "d835395a71a29e4e",
    "g": "d94168eab795cd92",
    "name": "Connect to Event Stream",
    "url": "",
    "events": [],
    "headers": {},
    "proxy": "",
    "restart": true,
    "rejectUnauthorized": true,
    "withCredentials": true,
    "timeout": "15",
    "x": 210,
    "y": 240,
    "wires": [
      [
        "4cb919fb537095df"
      ]
    ]
  },
  {
    "id": "91b2ba9e7853a348",
    "type": "delay",
    "z": "d835395a71a29e4e",
    "g": "d94168eab795cd92",
    "name": "Delay .5s",
    "pauseType": "delay",
    "timeout": "0.5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 215,
    "y": 80,
    "wires": [
      [
        "240552586c560f25"
      ]
    ],
    "icon": "font-awesome/fa-pause-circle",
    "l": false
  },
  {
    "id": "1339c8545569bbf6",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "d94168eab795cd92",
    "name": "Generate URL",
    "func": "//  ############################################################################\n//       Get global config settings\nconfig = global.get(\"onecontrol2mqtt.config\")\n\n//  ############################################################################\n//       Save results to global config\ncore = {\n    \"versionSW\":            msg.payload.version,\n    \"versionHW\":            msg.payload.bridge\n}\nglobal.set(\"onecontrol2mqtt.platform\",core)\n\n//  ############################################################################\n//       Build URL to connect to OneControl event stream\nmsg.url = config.sourceHTTPServer + config.sourceHTTPRestTarget\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 240,
    "y": 200,
    "wires": [
      [
        "1bb181142da2e1d1"
      ]
    ]
  },
  {
    "id": "4cb919fb537095df",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "d94168eab795cd92",
    "name": "Unpack Raw Event *",
    "func": "//  ############################################################################\n//       Incoming messages are double strings - payload inside a payload.\n//\nif (msg.event == \"error\") {\n        node.error(\"Unable to connect to OneControl unit at \" + msg.url)\n    } else {\n    msg.payload = JSON.parse(msg.payload)\n    payloadRaw = JSON.parse(msg.payload.payload)\n    msg.payload.payload = JSON.parse(msg.payload.payload)\n    msg = msg.payload\n    return msg;\n    }\n//  ############################################################################",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 220,
    "y": 280,
    "wires": [
      [
        "0e3f7dde666c6f45"
      ]
    ]
  },
  {
    "id": "bb5bbfe0692ce074",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "d94168eab795cd92",
    "name": "Set Variables",
    "func": "config = {\n    \"config\":      {\n            \"sourceHTTPServer\":                 \"http://192.168.1.4:8080\",//\"http://localhost:8080\",\n            \"sourceHTTPRestTarget\":             \"/rest/events\",\n            \"mqttDestinationTopicBase\":         \"integration/onecontrol2mqtt\",\n            \"mqttDeviceBase\":                   \"device\"\n            }\n        }\n\nglobal.set(\"onecontrol2mqtt\",config)\n\nmsg.url = config.config.sourceHTTPServer + config.config.sourceHTTPRestTarget\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 330,
    "y": 60,
    "wires": [
      []
    ]
  },
  {
    "id": "240552586c560f25",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "d94168eab795cd92",
    "name": "Get Platform Versions",
    "func": "//  ############################################################################\n//       Get global config settings\nconfig = global.get(\"onecontrol2mqtt.config\")\n\n//  ############################################################################\n//       build URL needed to pull platform versions\nmsg.url = config.sourceHTTPServer + \"/rest/bindings/idsmyrv/config\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 220,
    "y": 120,
    "wires": [
      [
        "dc74026414fee91f"
      ]
    ]
  },
  {
    "id": "dc74026414fee91f",
    "type": "http request",
    "z": "d835395a71a29e4e",
    "g": "d94168eab795cd92",
    "name": "Get Platform Info",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 230,
    "y": 160,
    "wires": [
      [
        "1339c8545569bbf6"
      ]
    ]
  },
  {
    "id": "01ce43d4d781e61f",
    "type": "link in",
    "z": "d835395a71a29e4e",
    "g": "e715a1afef86e79d",
    "name": "",
    "links": [
      "5b47a0a705f5603d"
    ],
    "x": 1235,
    "y": 60,
    "wires": [
      [
        "c6dfaf6fa723a238"
      ]
    ]
  },
  {
    "id": "5b47a0a705f5603d",
    "type": "link out",
    "z": "d835395a71a29e4e",
    "g": "4d120df8ca1fcd48",
    "name": "",
    "mode": "link",
    "links": [
      "01ce43d4d781e61f"
    ],
    "x": 755,
    "y": 220,
    "wires": []
  },
  {
    "id": "e6e2cb88c6f1676e",
    "type": "function",
    "z": "d835395a71a29e4e",
    "g": "e5b7f34b2218c588",
    "name": "Payload cleanup",
    "func": "\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 950,
    "y": 180,
    "wires": [
      [
        "2136a0e7f2c00b5e"
      ]
    ]
  }
]
